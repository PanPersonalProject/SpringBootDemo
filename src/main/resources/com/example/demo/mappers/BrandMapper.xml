<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mappers.BrandMapper">

    <resultMap id="brandMap" type="com.example.demo.bean.Brand">
        <result property="brandName" column="brand_name"/>
        <result property="companyName" column="company_name"/>
    </resultMap>

    <select id="selectAll" resultMap="brandMap">
        select *
        from tb_brand
    </select>


    <!--    参数占位符：
            1.#{}:会将其替换为？，可以防止sql注入
            2.${}:拼sql，会从在sql入住问题
            3.使用时机：
                1.参数传递的时候#{}
                2.表面或者列名不固定的时候${}
            4. CDATA用于特殊字符
                <![CDATA[
                <
                ]]>
     -->
    <select id="selectById" resultMap="brandMap">

        select *
        from tb_brand
        where id = #{id}
    </select>
    <select id="selectByCondition" resultMap="brandMap">
        select *
        from tb_brand
        <!--where标签会对边界进行处理-->
        <where>
            <if test="status!=null and status !=''">
                and status = #{status}
            </if>

            <if test="companyName!=null and companyName !=''">
                and company_name like #{companyName}
            </if>

            <if test="brandName!=null and brandName !=''">
                and brand_name like #{brandName}
            </if>
        </where>

    </select>

    <select id="selectByConditionSingle" resultMap="brandMap">
        select *
        from tb_brand
        <where>
            <choose><!--相当于switch-->
                <when test="status != null"><!--相当于case-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != '' "><!--相当于case-->
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''"><!--相当于case-->
                    brand_name like #{brandName}
                </when>

            </choose>
        </where>
    </select>

   <!--
   主键返回
   useGeneratedKeys	（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。
    keyProperty	（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status})
    </insert>



    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>
</mapper>